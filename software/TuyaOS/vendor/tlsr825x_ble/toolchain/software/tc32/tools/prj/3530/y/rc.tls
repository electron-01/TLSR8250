///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

s = p_get_size (0, 4)
a = p_get_adr  (0, 4)
n = p_get_buf  (0, 4)
off = 0

ssize = 1024
adr = a
ns = s
//print "read size", ns, "\r\n"
while (ns > 0)
	if (ns > ssize) then
		nt = ssize
	else
		nt = ns
	endif
	v = rd_mem (adr, off, nt)
	v = p_dis_buf (off, nt)
	ns = ns - nt
	adr = adr + nt
wend
