///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////// 
// subroutine: read register
///////////////////////////////////////////////////////////////////////////////////////// 
sub rd_reg (a, size)
	usb_v = p_rd_reg (a, size)
	return usb_v
end sub

sub rd_mem (a, offset, size)
	usb_v = p_rd_mem (a, offset, size)
	return usb_v
end sub

sub rd_fifo (a, offset, size)
	usb_v = p_rd_fifo (a, offset, size)
	return usb_v
end sub

///////////////////////////////////////////////////////////////////////////////////////// 
// subroutine: write register
///////////////////////////////////////////////////////////////////////////////////////// 
sub wr_reg (a, d, size)
	usb_v = p_wr_reg (a, d, size)
end sub

sub wr_mem (a, offset, size)
	usb_v = p_wr_mem (a, offset, size)
end sub

sub wr_fifo (a, offset, size)
	usb_v = p_wr_fifo (a, offset, size)
end sub

///////////////////////////////////////////////////////////////////////////////////////// 
// misc sub
///////////////////////////////////////////////////////////////////////////////////////// 
