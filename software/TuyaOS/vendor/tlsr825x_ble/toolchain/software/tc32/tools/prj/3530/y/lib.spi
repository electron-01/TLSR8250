///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////// 
// subroutine
///////////////////////////////////////////////////////////////////////////////////////// 
sub wr_mem (a, offset, size)
	spi_ah = a >> 8
	spi_al = and (a, 0xff)
	spi_v = p_wr_reg (0x09, 0x13, 1)	// spi master mode, ram
	spi_v = p_wr_reg (0x09, 0x12, 1)	// spi cn = 0
	spi_v = p_wr_reg (0x08, spi_ah, 1)	// address high byte
	spi_v = p_wr_reg (0x08, spi_al, 1)	// address low byte
	spi_v = p_wr_reg (0x08, 0x00, 1)	// write command
	for spi_i=0 to size-1
		spi_d = p_get_buf (offset+spi_i, 1)
		spi_v = p_wr_reg (0x08, spi_d, 1)
	next spi_i
	spi_v = p_wr_reg (0x09, 0x13, 1)	// spi cn = 1
end sub

sub wr_reg (a, offset, size)
	spi_v = wr_mem (a, offset, size)
	return size
end sub

sub wr_fifo (a, offset, size)
	spi_ah = a >> 8
	spi_al = and (a, 0xff)
	spi_v = p_wr_reg (0x09, 0x03, 1)	// spi master mode, fifo
	spi_v = p_wr_reg (0x09, 0x02, 1)	// spi cn = 0
	spi_v = p_wr_reg (0x08, spi_ah, 1)	// address high byte
	spi_v = p_wr_reg (0x08, spi_al, 1)	// address low byte
	spi_v = p_wr_reg (0x08, 0x00, 1)	// write command
	for spi_i=0 to size-1
		spi_d = p_get_buf (offset+spi_i, 1)
		spi_v = p_wr_reg (0x08, spi_d, 1)
	next spi_i
	spi_v = p_wr_reg (0x09, 0x13, 1)	// spi cn = 1
end sub

///////////////////////////////////////////////////////////////////////
//   Read
///////////////////////////////////////////////////////////////////////

sub rd_mem (a, offset, size)
	spi_ah = a >> 8
	spi_al = and (a, 0xff)
	spi_v = p_wr_reg (0x09, 0x13, 1)	// spi master mode, ram
	spi_v = p_wr_reg (0x09, 0x12, 1)	// spi cn = 0
	spi_v = p_wr_reg (0x08, spi_ah, 1)	// address high byte
	spi_v = p_wr_reg (0x08, spi_al, 1)	// address low byte
	spi_v = p_wr_reg (0x08, 0x80, 1)	// write command
	for spi_ii=0 to size-1
		spi_v = p_wr_reg (0x08, 0x00, 1)
		spi_v = p_rd_mem (0x08, offset + spi_ii, 1)
	next spi_ii
	spi_v = p_wr_reg (0x09, 0x13, 1)	// spi master mode, ram
	return size
end sub

sub rd_reg (a, offset, size)
	spi_v = rd_mem (a, offset, size)
	return size
end sub

sub rd_fifo (a, offset, size)
	spi_ah = a >> 8
	spi_al = and (a, 0xff)
	spi_v = p_wr_reg (0x09, 0x03, 1)	// spi master mode, ram
	spi_v = p_wr_reg (0x09, 0x02, 1)	// spi cn = 0
	spi_v = p_wr_reg (0x08, spi_ah, 1)	// address high byte
	spi_v = p_wr_reg (0x08, spi_al, 1)	// address low byte
	spi_v = p_wr_reg (0x08, 0x80, 1)	// write command
	for spi_ii=0 to size-1
		spi_v = p_wr_reg (0x08, 0x00, 1)
		spi_v = p_rd_mem (0x08, offset + spi_ii, 1)
	next spi_ii
	spi_v = p_wr_reg (0x09, 0x13, 1)	// spi master mode, ram
	return size
end sub

