///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

s = p_get_size (0, 4)
a = p_get_adr  (0, 4)
n = p_get_buf  (0, 4)
off = 1024 * 256

i = 0
v = wr_reg (0xba, 0x00, 1)	// clear to prevent firstread error after rd_reg
v = wr_reg (0xb8, a, 1)	// set address
v = wr_reg (0xba, 0x50, 1)	// multiple read
v = rd_fifo (0xb9, off, s)	// read register
v = p_dis_buf (off, s)	// display buffer

v = wr_reg (0xba, 0x00, 1)	// end of access

v = p_get_buf (off, 1)
v = p_set_buf (0, v, 1)

