///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////// 
// subroutine
///////////////////////////////////////////////////////////////////////////////////////// 
sub spi_wr_reg (a, d)
	wr_reg (0xb8, 0x600000 + d * 256 + a, 4)
	wr_reg (0xba, 0x00,1) //end of access add by ZQ
end sub

sub spi_rd_reg (addr)
	v = wr_reg (0xb8, addr, 1)	// analog register address
	v = wr_reg (0xba, 0x40, 1)	// analog read trigger
	old = rd_reg (0xb9, 1)		// analog register value
	wr_reg (0xba, 0x00,1) 		//end of access add by ZQ
	return old
end sub

sub sub_bit_set (addr, bit_pos)
    v = rd_reg(addr, 1)
    bit_set_mask = 1 << bit_pos
    v = or(bit_set_mask, v)
    v = wr_reg(addr, v, 1)
endsub

sub sub_bit_clr (addr, bit_pos)
    v = rd_reg(addr, 1)
    bit_set_mask = xor(0xff, 1 << bit_pos)
    v = and(bit_set_mask, v)
    v = wr_reg(addr, v, 1)
endsub

//Write bit position [high_off:low_off] with value "d" for the byte at "addr"
sub sub_wr_ana (addr, d, high_off, low_off)
	v = wr_reg (0xb8, addr, 1)	// analog register address
	v = wr_reg (0xba, 0x40, 1)	// analog read trigger
	old = rd_reg (0xb9, 1)	// analog register value
	wr_reg (0xba, 0x00,1) //end of access add by ZQ
   
   bit_mask = 1 << low_off
   value_mask = 0xff
   for i = low_off to high_off
       value_mask = xor(value_mask, bit_mask)
       bit_mask = bit_mask << 1
   next i
   
   old = and(old, value_mask)
   insert = d << low_off
   d = xor(insert, old)

   spi_wr_reg (addr, d)
endsub

//Write bit position [high_off:low_off] with value "d" for the byte at "addr"
sub sub_wr (addr, d, high_off, low_off)
   old = rd_reg (addr, 1)	// register value
   
   bit_mask = 1 << low_off
   value_mask = 0xff
   for i = low_off to high_off
       value_mask = xor(value_mask, bit_mask)
       bit_mask = bit_mask << 1
   next i
   
   old = and(old, value_mask)
   insert = d << low_off
   d = xor(insert, old)

   wr_reg (addr, d, 1)
endsub
