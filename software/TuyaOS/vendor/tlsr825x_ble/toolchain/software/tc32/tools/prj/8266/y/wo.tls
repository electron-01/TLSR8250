///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

s = p_get_size (0, 4)
a = p_get_adr  (0, 4)
n = 1024
w = 0
adr = a

//ts5320 system on
otp_wtr_v = wr_reg (0x60, 0x00, 3)
otp_wtr_v = wr_reg (0x63, 0x7ffff, 3)
//open vpp 6.75V
otp_wtr_v = wr_reg(0x71, 0x13, 1)		//rst clear
otp_wtr_v = wr_reg(0xb8, 0x88, 1)		//enable clock : add
otp_wtr_v = wr_reg(0xb9, 0x14, 1)		//enable clock : value
otp_wtr_v = wr_reg(0xba, 0x60, 1)		//enable clock : write 

otp_rdr = wr_reg (0x602, 0x05,1)			//stop cpu
otp_rdr = wr_reg (0x12, 0x7e,1)				//power otp

while (n > 0) 
	v = p_ld_buf (0, n)
for otp_i=0 to v-1	
	if (v > 0) then	
		otp_wtr_d = p_get_buf(otp_i, 1)
		otp_rdr = wr_reg (0x10, a,2)				//reg10=address
		otp_rdr = wr_reg (0x1a, 0x02,1)				//ptm : write
		otp_rdr = wr_reg (0x13, otp_wtr_d, 1)		//reg13 = data	
		otp_rdr = wr_reg (0x13, otp_wtr_d, 1)		//reg13 = data 
		a = a + 1									//address jump 			
		w = w + 1									//flag size		
	endif
	if (v < n) then
		n = 0
	endif
next otp_i
wend


printx adr, 4, ' '
print w, " bytes"
