///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////// 
// subroutine
///////////////////////////////////////////////////////////////////////////////////////// 
sub wr_reg (a, d, size)
	sss_ah = a >> 8
	sss_al = and (a, 0xff)
	sss_d3 = d >> 24
	sss_d2 = and (d >> 16, 0xff)
	sss_d1 = and (d >> 8, 0xff)
	sss_d0 = and (d, 0xff)

	//print sss_ah, sss_al, d
	sss_v = p_wr_reg (0xb0, 0x05ff,2)
	sss_v = p_wr_reg (0xb0, 0x055a,2)
	sss_v = p_wr_reg (0xb0, sss_ah + 0x100, 2)
	sss_v = p_wr_reg (0xb0, sss_al + 0x100, 2)
	sss_v = p_wr_reg (0xb0, 0x0100, 2)
	sss_v = p_wr_reg (0xb0, sss_d0 + 0x100, 2)
	if (size > 1) then
		sss_v = p_wr_reg (0xb0, sss_d1 + 0x100, 2)
	endif
	if (size > 2) then
		sss_v = p_wr_reg (0xb0, sss_d2 + 0x100, 2)
	endif
	if (size > 3) then
		sss_v = p_wr_reg (0xb0, sss_d3 + 0x100, 2)
	endif
	sss_v = p_wr_reg (0xb0, 0x05ff, 2)		// end of access
end sub

sub wr_mem (a, offset, size)
	swb_ah = a >> 8
	swb_al = and (a, 0xff)
	swb_v = p_wr_reg (0xb0, 0x05ff,2)
	swb_v = p_wr_reg (0xb0, 0x055a,2)
	swb_v = p_wr_reg (0xb0, swb_ah + 0x100, 2)
	swb_v = p_wr_reg (0xb0, swb_al + 0x100, 2)
	swb_v = p_wr_reg (0xb0, 0x0100, 2)
	for swb_i=0 to size-1
		swb_d = p_get_buf (offset+swb_i, 1)
		swb_v = p_wr_reg (0xb0, swb_d + 0x100, 2)
	next swb_i

	swb_v = p_wr_reg (0xb0, 0x05ff, 2)		// end of access
end sub

sub wr_fifo (a, offset, size)
	swb_v = wr_reg (0xb3, 0x80, 1)  // fifo mode
	swb_ah = a >> 8
	swb_al = and (a, 0xff)
	swb_v = p_wr_reg (0xb0, 0x05ff,2)
	swb_v = p_wr_reg (0xb0, 0x055a,2)
	swb_v = p_wr_reg (0xb0, swb_ah + 0x100, 2)
	swb_v = p_wr_reg (0xb0, swb_al + 0x100, 2)
	swb_v = p_wr_reg (0xb0, 0x0100, 2)
	for swb_i=0 to size-1
		swb_d = p_get_buf (offset+swb_i, 1)
		swb_v = p_wr_reg (0xb0, swb_d + 0x100, 2)
	next swb_i

	swb_v = p_wr_reg (0xb0, 0x05ff, 2)		// end of access
	swb_v = wr_reg (0xb3, 0x00, 1)  // ram mode
end sub

sub rd_reg (a, size)
	swb_ah = a >> 8
	swb_al = and (a, 0xff)
	//print swb_ah, swb_al, d
	swb_v = p_wr_reg (0xb0, 0x05ff,2)
	swb_v = p_wr_reg (0xb0, 0x055a,2)
	swb_v = p_wr_reg (0xb0, swb_ah + 0x100, 2)
	swb_v = p_wr_reg (0xb0, swb_al + 0x100, 2)
	swb_v = p_wr_reg (0xb0, 0x0180, 2)  // read command
	

	for swb_ii=0 to size - 1
		swb_v = p_wr_reg (0xb1, 0x02, 1)	// read byte
		swb_v = p_rd_mem (0xb0, offset + swb_ii, 1)
	next swb_ii
	swb_v = p_wr_reg (0xb0, 0x05ff, 2)		// end of access
	swb_v = p_get_buf (0, size)
	return swb_v
end sub

sub rd_mem (a, offset, size)
	swb_ah = a >> 8
	swb_al = and (a, 0xff)
	//print swb_ah, swb_al, d
	swb_v = p_wr_reg (0xb0, 0x05ff,2)
	swb_v = p_wr_reg (0xb0, 0x055a,2)
	swb_v = p_wr_reg (0xb0, swb_ah + 0x100, 2)
	swb_v = p_wr_reg (0xb0, swb_al + 0x100, 2)
	swb_v = p_wr_reg (0xb0, 0x0180, 2)  // read command
	

	for swb_ii=0 to size - 1
		swb_v = p_wr_reg (0xb1, 0x02, 1)	// read byte
		swb_v = p_rd_mem (0xb0, offset + swb_ii, 1)
	next swb_ii
	swb_v = p_wr_reg (0xb0, 0x05ff, 2)		// end of access
	return size
end sub

sub rd_fifo (a, offset, size)
	swb_v = wr_reg (0xb3, 0x80, 1)  // fifo mode
	swb_ah = a >> 8
	swb_al = and (a, 0xff)
	//print swb_ah, swb_al, d
	swb_v = p_wr_reg (0xb0, 0x05ff,2)
	swb_v = p_wr_reg (0xb0, 0x055a,2)
	swb_v = p_wr_reg (0xb0, swb_ah + 0x100, 2)
	swb_v = p_wr_reg (0xb0, swb_al + 0x100, 2)
	swb_v = p_wr_reg (0xb0, 0x0180, 2)  // read command

	for swb_ii=0 to size - 1
		swb_v = p_wr_reg (0xb1, 0x02, 1)	// read byte
		swb_v = p_rd_mem (0xb0, offset + swb_ii, 1)
	next swb_ii
	swb_v = p_wr_reg (0xb0, 0x05ff, 2)		// end of access
	swb_v = wr_reg (0xb3, 0x00, 1)  // ram mode
	return size
end sub

