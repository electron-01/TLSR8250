///////////////////////////////////////////////////
// type: 1 for byte; 2 for short; 4 for word
//
//	a=p_rd_reg	(adr, type)
//	a=p_rd_mem	(adr, offset, len)
//	a=p_rd_fifo	(adr, offset, len)
//	a=p_wr_reg	(adr, dat, type)
//	a=p_wr_mem	(adr, offset, len)
//	a=p_wr_fifo	(adr, offset, len)
//	a=p_get_buf	(index, type)		# buf[index]
//	a=p_set_buf	(index, dat, type)	# buf[index] = dat
//	a=p_ld_buf	(offset, len)
//	a=p_dis_buf	(offset, len)
//	a=p_get_adr	(offset, type)		# return address argument
//	a=p_get_size	(offset, type)		# return size argument
//	printx value, number_of_byte, char	# char: 32(' ') 9('\t') 10 ('\n')
//	a=getc (blocking)			# get char, 0 for non-blocking
///////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////// 
// write subroutine
///////////////////////////////////////////////////////////////////////////////////////// 
sub wr_mem (a, offset, size)
	evb_v = p_wr_mem (0xa000, offset, size)
	evb_v = p_wr_reg (0x9ff8, a, 4)
	evb_v = p_wr_reg (0x9ffc, size + 0x1000000, 4)
	
	for evb_i=0 to 100
		if (p_rd_reg (0x9ff0, 4) >= size) break
	next evb_i
	return size
end sub

sub wr_reg (a, d, size)
	evb_v = p_wr_reg (0xa000, d, size)
	evb_v = p_wr_reg (0x9ff8, a, 4)
	evb_v = p_wr_reg (0x9ffc, size + 0x1000000, 4)
	for evb_i=0 to 100
		if (p_rd_reg (0x9ff0, 4) >= size) break
	next evb_i
	return size
end sub

sub wr_fifo (a, offset, size)
	evb_v = wr_reg (0xb3, 0x80, 1)  // fifo mode
	evb_v = wr_mem (a, offset, size)
	evb_v = wr_reg (0xb3, 0x00, 1)  // ram mode
	return size
end sub

///////////////////////////////////////////////////////////
// read subroutine
///////////////////////////////////////////////////////////
sub rd_mem (a, offset, size)
	evb_v = p_wr_reg (0x9ff8, a, 4)
	evb_v = p_wr_reg (0x9ffc, size + (0x81<<24), 4)
	
	for evb_i=0 to 100
		if (p_rd_reg (0x9ff0, 4) >= size) break
	next evb_i

	evb_v = p_rd_mem (0xa000, offset, size)
	return size
end sub

sub rd_reg (a, size)
	evb_v = rd_mem (a, 0, size)
	evb_v = p_get_buf (0, size)
	return evb_v
end sub

sub rd_fifo (a, offset, size)
	evb_v = wr_reg (0xb3, 0x80, 1)  // fifo mode
	evb_v = rd_mem (a, offset, size)
	evb_v = wr_reg (0xb3, 0x00, 1)  // fifo mode
	return size
end sub

